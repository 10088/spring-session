apply from: JAVA_GRADLE
apply from: MAVEN_GRADLE

project.conf2ScopeMappings.addMapping(MavenPlugin.TEST_COMPILE_PRIORITY + 1, project.configurations.getByName("integrationTestCompile"), Conf2ScopeMappingContainer.TEST)
project.conf2ScopeMappings.addMapping(MavenPlugin.TEST_COMPILE_PRIORITY + 2, project.configurations.getByName("integrationTestRuntime"), Conf2ScopeMappingContainer.TEST)
check.dependsOn integrationTest

configurations {
    jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

dependencies {
    optional "org.springframework.data:spring-data-redis:1.3.0.RELEASE"
    provided "javax.servlet:javax.servlet-api:$servletApiVersion"
    integrationTestCompile "redis.clients:jedis:2.4.1",
            "org.apache.commons:commons-pool2:2.2",
            "redis.embedded:embedded-redis:0.2"
    testCompile 'junit:junit:4.11',
            'org.mockito:mockito-core:1.9.5',
            "org.springframework:spring-test:$springVersion",
            'org.easytesting:fest-assert:1.4',
            "org.springframework.security:spring-security-core:$springSecurityVersion"

    jacoco "org.jacoco:org.jacoco.agent:0.6.2.201302030002:runtime"
}

javadoc {
    description = "Generates project-level javadoc for use in -javadoc jar"

    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = project.name
    options.links(project.ext.javadocLinks)
    options.addStringOption('Xdoclint:none', '-quiet')

    // suppress warnings due to cross-module @see and @link references;
    // note that global 'api' task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    // don't include or exclude anything explicitly by default. See SPR-12085.
}

task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

test {
    jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=${project.group}.*"
}
integrationTest {
    jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=${project.group}.*"
}